name: 'Terraform Plan/Apply'

on:
  pull_request:
    paths:
      - 'infra/tf/**'
  push:
    branches: [ main ]
    paths:
      - 'infra/tf/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDC authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_USE_OIDC: true

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
      environment: ${{ steps.setup-env.outputs.environment }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Determine environment
    - name: Setup Environment
      id: setup-env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        ENV=${{ steps.setup-env.outputs.environment }}
        cd infra/tf
        
        # Copy environment-specific backend configuration
        if [ -f "environments/$ENV/backend.tf" ]; then
          cp "environments/$ENV/backend.tf" .
          echo "Using backend config for environment: $ENV"
        else
          echo "No backend config found for environment: $ENV"
          exit 1
        fi
        
        terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: tf-plan
      run: |
        ENV=${{ steps.setup-env.outputs.environment }}
        cd infra/tf
        
        export exitcode=0
        
        # Use environment-specific tfvars if they exist
        if [ -f "environments/$ENV/terraform.tfvars" ]; then
          terraform plan -detailed-exitcode -no-color -out tfplan -var-file="environments/$ENV/terraform.tfvars" || export exitcode=$?
        else
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        fi
        
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-${{ steps.setup-env.outputs.environment }}
        path: infra/tf/tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        cd infra/tf
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "**Environment:** ${{ steps.setup-env.outputs.environment }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        
    # If this is a PR post the changes
    - name: Publish Terraform Plan to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.inputs.action == 'apply'
    runs-on: ubuntu-latest
    environment: ${{ needs.terraform-plan.outputs.environment }}
    needs: [terraform-plan]
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        ENV=${{ needs.terraform-plan.outputs.environment }}
        cd infra/tf
        
        # Copy environment-specific backend configuration
        if [ -f "environments/$ENV/backend.tf" ]; then
          cp "environments/$ENV/backend.tf" .
          echo "Using backend config for environment: $ENV"
        else
          echo "No backend config found for environment: $ENV"
          exit 1
        fi
        
        terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan-${{ needs.terraform-plan.outputs.environment }}
        path: infra/tf

    # Terraform Apply
    - name: Terraform Apply
      run: |
        cd infra/tf
        terraform apply -auto-approve tfplan

  terraform-destroy:
    name: 'Terraform Destroy'
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    environment: ${{ needs.terraform-plan.outputs.environment }}
    needs: [terraform-plan]
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        ENV=${{ needs.terraform-plan.outputs.environment }}
        cd infra/tf
        
        # Copy environment-specific backend configuration
        if [ -f "environments/$ENV/backend.tf" ]; then
          cp "environments/$ENV/backend.tf" .
          echo "Using backend config for environment: $ENV"
        else
          echo "No backend config found for environment: $ENV"
          exit 1
        fi
        
        terraform init

    # Terraform Destroy
    - name: Terraform Destroy
      run: |
        ENV=${{ needs.terraform-plan.outputs.environment }}
        cd infra/tf
        
        # Use environment-specific tfvars if they exist
        if [ -f "environments/$ENV/terraform.tfvars" ]; then
          terraform destroy -auto-approve -var-file="environments/$ENV/terraform.tfvars"
        else
          terraform destroy -auto-approve
        fi
