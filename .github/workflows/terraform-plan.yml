name: üîç Terraform Plan & Validation

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to plan deployment for'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      destroy_plan:
        description: 'Generate destroy plan instead of apply plan'
        required: false
        type: boolean
        default: false
      detailed_output:
        description: 'Show detailed plan output in logs'
        required: false
        type: boolean
        default: true
  pull_request:
    paths:
      - 'infra/tf/**'
      - '.github/workflows/terraform-plan.yml'
    branches:
      - main
      - develop
  push:
    paths:
      - 'infra/tf/**'
    branches:
      - main

permissions:
  contents: read
  id-token: write
  pull-requests: write  # For PR comments
  issues: write         # For issue creation on failures

jobs:
  terraform-plan:
    name: Terraform Plan (${{ github.event.inputs.environment || 'dev' }})
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    env:
      TF_IN_AUTOMATION: true
      TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    
    outputs:
      plan_status: ${{ steps.plan.outputs.status }}
      plan_summary: ${{ steps.plan.outputs.summary }}
      validation_status: ${{ steps.validate.outputs.status }}
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context

      - name: üîê Azure Login with OIDC
        run: |
          echo "=========================================="
          echo "üîê AZURE OIDC AUTHENTICATION"
          echo "=========================================="
          echo "‚è±Ô∏è Start time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          START_TIME=$(date +%s)
          echo "‚ñ∂Ô∏è Step 1: Requesting OIDC token from GitHub..."
          
          OIDC_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
          
          if [ "$OIDC_TOKEN" = "null" ] || [ -z "$OIDC_TOKEN" ]; then
            echo "‚ùå Failed to get OIDC token"
            exit 1
          fi
          
          echo "‚úÖ Step 1 completed: OIDC token obtained"
          echo ""
          echo "‚ñ∂Ô∏è Step 2: Authenticating with Azure using OIDC..."
          
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }} \
            --allow-no-subscriptions \
            --federated-token "$OIDC_TOKEN"
          
          echo "‚úÖ Step 2 completed: Azure login successful"
          echo ""
          echo "‚ñ∂Ô∏è Step 3: Setting subscription context..."
          
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
          echo "‚úÖ Step 3 completed: Subscription context set"
          echo ""
          echo "‚ñ∂Ô∏è Step 4: Verifying authentication..."
          
          az account show --query '{name:name, id:id, tenantId:tenantId}' -o table
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo ""
          echo "‚úÖ Step 4 completed: Authentication verified"
          echo "‚úÖ Azure authentication process completed successfully"
          echo "‚è±Ô∏è Total execution time: ${DURATION}s"
          echo "‚è±Ô∏è End time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=========================================="

      - name: üèóÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.9.0"
          terraform_wrapper: false  # Disable wrapper for cleaner output

      - name: üîß Configure Backend & Initialize Terraform
        working-directory: infra/tf
        run: |
          echo "=========================================="
          echo "üîß TERRAFORM BACKEND & INITIALIZATION"
          echo "=========================================="
          echo "‚è±Ô∏è Start time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          START_TIME=$(date +%s)
          echo "‚ñ∂Ô∏è Step 1: Setting up backend configuration..."
          
          # Copy backend configuration for the specified environment
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          echo "Environment: $ENV"
          
          if [ -f "environments/$ENV/backend.tf" ]; then
            cp "environments/$ENV/backend.tf" .
            echo "‚úÖ Backend configuration copied from environments/$ENV/backend.tf"
          else
            echo "‚ùå Backend configuration not found for environment: $ENV"
            exit 1
          fi
          
          echo "‚úÖ Step 1 completed: Backend configuration set"
          echo ""
          echo "‚ñ∂Ô∏è Step 2: Running terraform init..."
          
          terraform init -input=false
          
          echo "‚úÖ Step 2 completed: Terraform initialized"
          echo ""
          echo "‚ñ∂Ô∏è Step 3: Checking provider versions..."
          
          terraform version
          
          echo "‚úÖ Step 3 completed: Version check finished"
          echo ""
          echo "‚ñ∂Ô∏è Step 4: Listing configured providers..."
          
          terraform providers
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo ""
          echo "‚úÖ Step 4 completed: Provider listing finished"
          echo "‚úÖ Terraform initialization process completed"
          echo "‚è±Ô∏è Total execution time: ${DURATION}s"
          echo "‚è±Ô∏è End time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=========================================="

      - name: üîç Validate Terraform Configuration
        id: validate
        working-directory: infra/tf
        run: |
          echo "=========================================="
          echo "üîç TERRAFORM CONFIGURATION VALIDATION"
          echo "=========================================="
          echo "‚è±Ô∏è Start time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          START_TIME=$(date +%s)
          echo "‚ñ∂Ô∏è Step 1: Checking Terraform formatting..."
          
          terraform fmt -check -recursive || {
            echo "‚ö†Ô∏è Terraform files are not properly formatted"
            echo "Run 'terraform fmt -recursive' to fix formatting"
            terraform fmt -diff -recursive
          }
          
          echo "‚úÖ Step 1 completed: Format check finished"
          echo ""
          echo "‚ñ∂Ô∏è Step 2: Running terraform validate..."
          
          terraform validate
          
          VALIDATION_STATUS=$?
          if [ $VALIDATION_STATUS -eq 0 ]; then
            echo "‚úÖ Step 2 completed: Terraform configuration is valid"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Step 2 failed: Terraform configuration validation failed"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo ""
          echo "‚úÖ Terraform validation process completed"
          echo "‚è±Ô∏è Total execution time: ${DURATION}s"
          echo "‚è±Ô∏è End time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=========================================="

      - name: üîß Initialize Terraform
        working-directory: infra/tf
        run: |
          echo "=========================================="
          echo "üîß TERRAFORM INITIALIZATION"
          echo "=========================================="
          echo "‚è±Ô∏è Start time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          START_TIME=$(date +%s)
          echo "‚ñ∂Ô∏è Step 1: Running terraform init..."
          
          terraform init -input=false
          
          echo "‚úÖ Step 1 completed: Terraform initialized"
          echo ""
          echo "‚ñ∂Ô∏è Step 2: Checking provider versions..."
          
          terraform version
          
          echo "‚úÖ Step 2 completed: Version check finished"
          echo ""
          echo "‚ñ∂Ô∏è Step 3: Listing configured providers..."
          
          terraform providers
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo ""
          echo "‚úÖ Step 3 completed: Provider listing finished"
          echo "‚úÖ Terraform initialization process completed"
          echo "‚è±Ô∏è Total execution time: ${DURATION}s"
          echo "‚è±Ô∏è End time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=========================================="

      - name: üîç Security Scan with Checkov
        working-directory: infra/tf
        continue-on-error: true  # Don't fail the workflow for security issues
        run: |
          echo "=========================================="
          echo "üîç SECURITY SCANNING WITH CHECKOV"
          echo "=========================================="
          echo "‚è±Ô∏è Start time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          START_TIME=$(date +%s)
          echo "‚ñ∂Ô∏è Step 1: Installing Checkov security scanner..."
          
          pip3 install checkov
          
          echo "‚úÖ Step 1 completed: Checkov installed"
          echo ""
          echo "‚ñ∂Ô∏è Step 2: Running security scan on Terraform files..."
          
          checkov -d . --framework terraform \
            --output cli \
            --output sarif \
            --output-file-path console,checkov-report.sarif || true
          
          echo "‚úÖ Step 2 completed: Security scan finished"
          echo ""
          echo "‚ñ∂Ô∏è Step 3: Checking scan results..."
          
          if [ -f "checkov-report.sarif" ]; then
            echo "‚úÖ Step 3 completed: SARIF report generated successfully"
            echo "üìä Security scan results saved to checkov-report.sarif"
          else
            echo "‚ö†Ô∏è Step 3 notice: No SARIF report generated"
          fi
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo ""
          echo "‚úÖ Security scanning process completed"
          echo "‚è±Ô∏è Total execution time: ${DURATION}s"
          echo "‚è±Ô∏è End time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=========================================="

      - name: üìã Generate Terraform Plan
        id: plan
        working-directory: infra/tf
        run: |
          echo "=========================================="
          echo "üìã TERRAFORM PLAN GENERATION"
          echo "=========================================="
          echo "‚è±Ô∏è Start time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          START_TIME=$(date +%s)
          
          # Determine plan type
          if [ "${{ github.event.inputs.destroy_plan }}" = "true" ]; then
            PLAN_TYPE="destroy"
            PLAN_FLAG="-destroy"
            echo "‚ñ∂Ô∏è Step 1: Preparing DESTROY plan generation..."
            echo "‚ö†Ô∏è WARNING: This will plan the destruction of resources!"
          else
            PLAN_TYPE="apply"
            PLAN_FLAG=""
            echo "‚ñ∂Ô∏è Step 1: Preparing APPLY plan generation..."
          fi
          
          echo "‚úÖ Step 1 completed: Plan type configured ($PLAN_TYPE)"
          echo ""
          echo "‚ñ∂Ô∏è Step 2: Running terraform plan..."
          
          terraform plan $PLAN_FLAG \
            -input=false \
            -out=tfplan \
            -detailed-exitcode \
            -var-file="terraform.tfvars" 2>&1 | tee plan-output.txt
          
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          
          echo "‚úÖ Step 2 completed: Plan generation finished"
          echo ""
          echo "‚ñ∂Ô∏è Step 3: Analyzing plan results..."
          
          # Analyze plan results
          case $PLAN_EXIT_CODE in
            0)
              PLAN_STATUS="no-changes"
              PLAN_SUMMARY="No changes required"
              echo "‚úÖ Step 3 result: No changes detected"
              ;;
            1)
              PLAN_STATUS="error"
              PLAN_SUMMARY="Plan generation failed"
              echo "‚ùå Step 3 result: Plan generation failed"
              ;;
            2)
              PLAN_STATUS="changes"
              PLAN_SUMMARY="Changes detected"
              echo "‚úÖ Step 3 result: Changes detected in plan"
              ;;
            *)
              PLAN_STATUS="unknown"
              PLAN_SUMMARY="Unknown plan status"
              echo "‚ö†Ô∏è Step 3 result: Unknown plan exit code: $PLAN_EXIT_CODE"
              ;;
          esac
          
          # Save outputs
          echo "status=$PLAN_STATUS" >> $GITHUB_OUTPUT
          echo "summary=$PLAN_SUMMARY" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Step 3 completed: Plan analysis finished"
          
          # Show plan summary if detailed output is enabled
          if [ "${{ github.event.inputs.detailed_output }}" = "true" ] && [ -f "plan-output.txt" ]; then
            echo ""
            echo "‚ñ∂Ô∏è Step 4: Displaying plan summary..."
            echo "----------------------------------------"
            # Show last 50 lines of plan for summary
            tail -50 plan-output.txt
            echo "----------------------------------------"
            echo "‚úÖ Step 4 completed: Plan summary displayed"
          fi
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo ""
          echo "‚úÖ Terraform plan generation process completed"
          echo "üìä Final Status: $PLAN_STATUS"
          echo "üìù Summary: $PLAN_SUMMARY"
          echo "‚è±Ô∏è Total execution time: ${DURATION}s"
          echo "‚è±Ô∏è End time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=========================================="

      - name: üíæ Save Plan and Reports
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.event.inputs.environment || 'dev' }}-${{ github.run_number }}
          path: |
            infra/tf/tfplan
            infra/tf/plan-output.txt
            infra/tf/checkov-report.sarif
          retention-days: 30

      - name: üìä Generate Plan Summary
        working-directory: infra/tf
        run: |
          echo "=========================================="
          echo "üìä PLAN SUMMARY GENERATION"
          echo "=========================================="
          echo "‚è±Ô∏è Start time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          START_TIME=$(date +%s)
          echo "‚ñ∂Ô∏è Step 1: Analyzing plan file..."
          
          # Generate detailed plan summary
          if [ -f "tfplan" ]; then
            terraform show -json tfplan > plan.json
            echo "‚úÖ Step 1 completed: Plan file analyzed"
            echo ""
            echo "‚ñ∂Ô∏è Step 2: Extracting resource change metrics..."
            
            # Extract key metrics
            RESOURCES_TO_ADD=$(jq -r '.resource_changes[] | select(.change.actions[] == "create") | .address' plan.json 2>/dev/null | wc -l)
            RESOURCES_TO_CHANGE=$(jq -r '.resource_changes[] | select(.change.actions[] == "update") | .address' plan.json 2>/dev/null | wc -l)
            RESOURCES_TO_DESTROY=$(jq -r '.resource_changes[] | select(.change.actions[] == "delete") | .address' plan.json 2>/dev/null | wc -l)
            
            echo "‚úÖ Step 2 completed: Metrics extracted"
            echo "   ‚Ä¢ Resources to Add: $RESOURCES_TO_ADD"
            echo "   ‚Ä¢ Resources to Change: $RESOURCES_TO_CHANGE"
            echo "   ‚Ä¢ Resources to Destroy: $RESOURCES_TO_DESTROY"
            echo ""
            echo "‚ñ∂Ô∏è Step 3: Generating markdown summary..."
            
            cat > plan-summary.md << EOF
          # Terraform Plan Summary - ${{ github.event.inputs.environment || 'dev' }}
          
          ## Plan Overview
          
          **Environment**: ${{ github.event.inputs.environment || 'dev' }}
          **Plan Type**: ${{ github.event.inputs.destroy_plan == 'true' && 'Destroy' || 'Apply' }}
          **Generated**: $(date)
          **Workflow**: ${{ github.workflow }}
          **Run**: ${{ github.run_number }}
          **Status**: ${{ steps.plan.outputs.status }}
          
          ## Resource Changes
          
          | Action | Count |
          |--------|-------|
          | üü¢ Add | $RESOURCES_TO_ADD |
          | üü° Change | $RESOURCES_TO_CHANGE |
          | üî¥ Destroy | $RESOURCES_TO_DESTROY |
          
          ## Validation Results
          
          - ‚úÖ **Terraform Validation**: ${{ steps.validate.outputs.status }}
          - ‚úÖ **Security Scan**: Completed (see artifacts)
          - ‚úÖ **Plan Generation**: ${{ steps.plan.outputs.status }}
          
          ## Next Steps
          
          1. **Review Plan**: Download and review the plan artifacts
          2. **Security Review**: Check the Checkov security scan results
          3. **Approval**: Get necessary approvals for changes
          4. **Apply**: Use the apply workflow to execute changes
          
          ---
          
          Generated by: ${{ github.actor }}
          Commit: ${{ github.sha }}
          EOF
          
          echo "‚úÖ Step 3 completed: Detailed summary generated"
          
          else
            echo "‚ö†Ô∏è Step 1 notice: Plan file not found"
            echo ""
            echo "‚ñ∂Ô∏è Step 2: Generating basic summary..."
            
            cat > plan-summary.md << EOF
          # Terraform Plan Summary - ${{ github.event.inputs.environment || 'dev' }}
          
          **Status**: ${{ steps.plan.outputs.status }}
          **Summary**: ${{ steps.plan.outputs.summary }}
          **Generated**: $(date)
          
          Plan details are available in the workflow logs and artifacts.
          EOF
          
          echo "‚úÖ Step 2 completed: Basic summary generated"
          fi
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo ""
          echo "‚úÖ Plan summary generation process completed"
          echo "‚è±Ô∏è Total execution time: ${DURATION}s"
          echo "‚è±Ô∏è End time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=========================================="
          
          Plan details are available in the workflow logs and artifacts.
          EOF
          fi
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo ""
          echo "‚úÖ Plan summary generated"
          echo "‚è±Ô∏è Execution time: ${DURATION}s"
          echo "‚è±Ô∏è End time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=========================================="

      - name: üí¨ Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './infra/tf/plan-summary.md';
            
            if (fs.existsSync(path)) {
              const summary = fs.readFileSync(path, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üîç Terraform Plan Results\n\n${summary}`
              });
            }

      - name: üéâ Plan Complete
        run: |
          echo "=========================================="
          echo "üéâ WORKFLOW COMPLETION"
          echo "=========================================="
          echo "‚è±Ô∏è Start time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          echo "üéâ Terraform plan and validation completed successfully!"
          echo ""
          echo "üìã Final Summary:"
          echo "‚Ä¢ Environment: ${{ github.event.inputs.environment || 'dev' }}"
          echo "‚Ä¢ Validation Status: ${{ steps.validate.outputs.status }}"
          echo "‚Ä¢ Plan Status: ${{ steps.plan.outputs.status }}"
          echo "‚Ä¢ Plan Summary: ${{ steps.plan.outputs.summary }}"
          echo ""
          echo "üì¶ Generated Artifacts:"
          echo "‚Ä¢ Terraform plan file (tfplan)"
          echo "‚Ä¢ Plan output logs (plan-output.txt)"
          echo "‚Ä¢ Security scan results (checkov-report.sarif)"
          echo "‚Ä¢ Plan summary report (plan-summary.md)"
          echo ""
          echo "üîÑ Recommended Next Steps:"
          echo "1. Download and review the plan artifacts"
          echo "2. Check security scan results for any issues"
          echo "3. Get necessary approvals for the changes"
          echo "4. If satisfied, proceed with terraform apply workflow"
          echo "5. Monitor the deployment process closely"
          echo ""
          echo "‚úÖ All workflow steps completed successfully"
          echo "‚è±Ô∏è End time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "=========================================="

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: failure()
    
    steps:
      - name: üö® Create Issue on Failure
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Terraform Plan Failed - ${{ github.event.inputs.environment || 'dev' }}`;
            const body = `
            ## Terraform Plan Failure Report
            
            **Environment**: ${{ github.event.inputs.environment || 'dev' }}
            **Workflow Run**: ${{ github.run_id }}
            **Triggered By**: ${{ github.actor }}
            **Commit**: ${{ github.sha }}
            
            ### Failure Details
            
            - **Validation Status**: ${{ needs.terraform-plan.outputs.validation_status }}
            - **Plan Status**: ${{ needs.terraform-plan.outputs.plan_status }}
            
            ### Action Required
            
            1. Review the workflow logs: [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Check for configuration errors or permission issues
            3. Fix the issues and re-run the workflow
            
            ### Troubleshooting
            
            - Check Azure permissions and OIDC configuration
            - Verify Terraform configuration syntax
            - Review security scan results if available
            
            ---
            
            This issue was automatically created by the Terraform Plan workflow.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['terraform', 'deployment-failure', 'auto-created']
            });
