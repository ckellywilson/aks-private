name: 🚀 Terraform Plan & Apply

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      auto_approve:
        description: 'Auto approve apply/destroy (use with caution)'
        required: false
        default: false
        type: boolean

env:
  TERRAFORM_VERSION: '1.7.0'
  TF_VAR_environment: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  terraform-plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    defaults:
      run:
        shell: bash
        working-directory: ./infra/tf

    outputs:
      tfplan_exitcode: ${{ steps.plan.outputs.exitcode }}
      tfplan_has_changes: ${{ steps.plan.outputs.has_changes }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: 🔐 Azure Login (Federated Identity)
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: � Set Terraform Authentication
        run: |
          echo "Setting up Terraform Azure authentication..."
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

      - name: �🔍 Verify Azure Access
        run: |
          echo "Current Azure subscription:"
          az account show --query '{name:name, id:id}' -o table

      - name: 📥 Download Backend Config (if exists)
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: backend-config-${{ env.TF_VAR_environment }}
          path: ./infra/tf/

      - name: 🏗️ Setup Backend Configuration
        run: |
          if [ -f backend-config.txt ]; then
            echo "Using existing backend configuration..."
            
            # Read values from backend-config.txt
            RG_NAME=$(grep "resource_group_name" backend-config.txt | cut -d'"' -f2)
            SA_NAME=$(grep "storage_account_name" backend-config.txt | cut -d'"' -f2)
            CONTAINER_NAME=$(grep "container_name" backend-config.txt | cut -d'"' -f2)
            KEY_NAME=$(grep "key" backend-config.txt | cut -d'"' -f2)
            
            # Update backend.tf with actual values
            cat > backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${RG_NAME}"
              storage_account_name = "${SA_NAME}"
              container_name       = "${CONTAINER_NAME}"
              key                  = "${KEY_NAME}"
            }
          }
          EOF
            
            echo "✅ Backend configuration updated"
          else
            echo "⚠️ No backend configuration found, using local state"
            echo "Run the 'Setup Terraform Backend' workflow first for remote state"
          fi

      - name: 🚀 Terraform Init
        run: terraform init

      - name: 🔍 Terraform Validate
        run: terraform validate

      - name: 📄 Check terraform.tfvars
        run: |
          if [ ! -f terraform.tfvars ]; then
            echo "⚠️ terraform.tfvars not found, creating from example..."
            cp terraform.tfvars.example terraform.tfvars
            echo "Please customize terraform.tfvars for your environment"
          else
            echo "✅ terraform.tfvars found"
          fi

      - name: 📋 Terraform Plan
        id: plan
        run: |
          set +e
          terraform plan -detailed-exitcode -out=tfplan
          exitcode=$?
          set -e
          
          echo "exitcode=${exitcode}" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 0 ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "✅ No changes needed"
          elif [ $exitcode -eq 2 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📋 Changes detected"
          else
            echo "❌ Terraform plan failed"
            exit $exitcode
          fi

      - name: 📤 Upload Terraform Plan
        if: steps.plan.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ env.TF_VAR_environment }}-${{ github.run_number }}
          path: ./infra/tf/tfplan
          retention-days: 30

      - name: 💬 Comment Plan on PR
        if: github.event_name == 'pull_request' && false  # Disabled - manual runs only
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('./infra/tf/tfplan', 'utf8');
            
            const output = `#### 📋 Terraform Plan Results for \`${{ env.TF_VAR_environment }}\`
            
            **Plan Status:** ${{ steps.plan.outputs.has_changes == 'true' && '📋 Changes Detected' || '✅ No Changes' }}
            **Exit Code:** \`${{ steps.plan.outputs.exitcode }}\`
            
            <details><summary>Show Plan Output</summary>
            
            \`\`\`terraform
            ${plan}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-apply:
    name: 🚀 Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      (github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy') &&
      (github.event.inputs.auto_approve == 'true' || github.event_name == 'workflow_dispatch')
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read
    
    defaults:
      run:
        shell: bash
        working-directory: ./infra/tf

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: 🔐 Azure Login (Federated Identity)
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: � Set Terraform Authentication
        run: |
          echo "Setting up Terraform Azure authentication..."
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

      - name: �📥 Download Backend Config
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: backend-config-${{ env.TF_VAR_environment }}
          path: ./infra/tf/

      - name: 📥 Download Terraform Plan
        if: github.event.inputs.action == 'apply' && needs.terraform-plan.outputs.tfplan_has_changes == 'true'
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ env.TF_VAR_environment }}-${{ github.run_number }}
          path: ./infra/tf/

      - name: 🏗️ Setup Backend Configuration
        run: |
          if [ -f backend-config.txt ]; then
            echo "Using existing backend configuration..."
            
            # Read values from backend-config.txt
            RG_NAME=$(grep "resource_group_name" backend-config.txt | cut -d'"' -f2)
            SA_NAME=$(grep "storage_account_name" backend-config.txt | cut -d'"' -f2)
            CONTAINER_NAME=$(grep "container_name" backend-config.txt | cut -d'"' -f2)
            KEY_NAME=$(grep "key" backend-config.txt | cut -d'"' -f2)
            
            # Update backend.tf with actual values
            cat > backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${RG_NAME}"
              storage_account_name = "${SA_NAME}"
              container_name       = "${CONTAINER_NAME}"
              key                  = "${KEY_NAME}"
            }
          }
          EOF
            
            echo "✅ Backend configuration updated"
          else
            echo "⚠️ No backend configuration found"
          fi

      - name: 🚀 Terraform Init
        run: terraform init

      - name: 📄 Setup terraform.tfvars
        run: |
          if [ ! -f terraform.tfvars ]; then
            echo "Creating terraform.tfvars from example..."
            cp terraform.tfvars.example terraform.tfvars
          fi

      - name: 🚀 Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          if [ -f tfplan ]; then
            echo "Applying saved plan..."
            terraform apply tfplan
          else
            echo "No saved plan found, running apply with auto-approve..."
            terraform apply -auto-approve
          fi

      - name: 💥 Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "⚠️ Destroying infrastructure for ${{ env.TF_VAR_environment }}..."
          terraform destroy -auto-approve

      - name: 📤 Upload Terraform State Info
        if: always()
        run: |
          echo "Terraform State Information:" > state-info.txt
          terraform state list >> state-info.txt 2>/dev/null || echo "No state found" >> state-info.txt
          terraform output -json > outputs.json 2>/dev/null || echo "{}" > outputs.json

      - name: 📤 Upload State Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-info-${{ env.TF_VAR_environment }}-${{ github.run_number }}
          path: |
            ./infra/tf/state-info.txt
            ./infra/tf/outputs.json
          retention-days: 30
