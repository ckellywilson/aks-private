name: "üîç Diagnose Service Principal Permissions"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to diagnose'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TERRAFORM_VERSION: 1.7.0

jobs:
  diagnose-permissions:
    name: "Diagnose Permissions for ${{ inputs.environment }}"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "üì• Checkout Repository"
        uses: actions/checkout@v4

      - name: "üîê Azure Login (Federated Identity)"
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: "üîç Check Service Principal Permissions"
        run: |
          echo "=== AZURE LOGIN STATUS ==="
          az account show --query '{name:name, id:id, user:user}' -o yaml
          
          echo -e "\n=== SERVICE PRINCIPAL INFO ==="
          SP_OBJECT_ID=$(az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }} --query objectId -o tsv)
          echo "Service Principal Object ID: $SP_OBJECT_ID"
          echo "Service Principal Client ID: ${{ secrets.AZURE_CLIENT_ID }}"
          
          echo -e "\n=== SUBSCRIPTION-LEVEL PERMISSIONS ==="
          echo "Current role assignments at subscription level:"
          az role assignment list \
            --assignee ${{ secrets.AZURE_CLIENT_ID }} \
            --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            --query "[].{Role:roleDefinitionName, Scope:scope}" \
            --output table || echo "No subscription-level permissions found"
          
          echo -e "\n=== CHECKING REQUIRED ROLES ==="
          REQUIRED_ROLES=("Contributor" "Storage Blob Data Contributor" "Storage Blob Data Owner" "User Access Administrator")
          
          for role in "${REQUIRED_ROLES[@]}"; do
            echo "Checking for role: $role"
            az role assignment list \
              --assignee ${{ secrets.AZURE_CLIENT_ID }} \
              --role "$role" \
              --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
              --query "[].roleDefinitionName" -o tsv | grep -q "$role" && echo "‚úÖ Has $role" || echo "‚ùå Missing $role"
          done
          
          echo -e "\n=== STORAGE ACCOUNT PERMISSIONS ==="
          RG_NAME="rg-terraform-state-${{ inputs.environment }}-cus-001"
          SA_NAME="st$(echo '${{ inputs.environment }}' | tr -d '-')cus001tfstate"
          
          if az group show --name "$RG_NAME" >/dev/null 2>&1; then
            echo "Resource Group exists: $RG_NAME"
            
            if az storage account show --name "$SA_NAME" --resource-group "$RG_NAME" >/dev/null 2>&1; then
              echo "Storage Account exists: $SA_NAME"
              
              STORAGE_ACCOUNT_ID=$(az storage account show \
                --name "$SA_NAME" \
                --resource-group "$RG_NAME" \
                --query "id" -o tsv)
              
              echo "Storage Account ID: $STORAGE_ACCOUNT_ID"
              
              echo -e "\nRole assignments on storage account:"
              az role assignment list \
                --assignee ${{ secrets.AZURE_CLIENT_ID }} \
                --scope "$STORAGE_ACCOUNT_ID" \
                --query "[].{Role:roleDefinitionName, Scope:scope}" \
                --output table || echo "No storage-level permissions found"
              
              echo -e "\nStorage account network rules:"
              az storage account show \
                --name "$SA_NAME" \
                --resource-group "$RG_NAME" \
                --query "networkRuleSet" -o yaml
              
            else
              echo "‚ùå Storage Account does not exist: $SA_NAME"
            fi
          else
            echo "‚ùå Resource Group does not exist: $RG_NAME"
          fi
          
          echo -e "\n=== TESTING SPECIFIC PERMISSIONS ==="
          echo "Testing Microsoft.Authorization/roleAssignments/write permission:"
          az provider show --namespace Microsoft.Authorization --query "resourceTypes[?resourceType=='roleAssignments'].apiVersions[0]" -o tsv
          
          echo -e "\nTesting storage operations:"
          echo "Checking if service principal can list storage accounts:"
          az storage account list --query "[].name" -o tsv | head -5 || echo "‚ùå Cannot list storage accounts"

      - name: "üéØ Generate Permission Recommendations"
        run: |
          echo "=== PERMISSION RECOMMENDATIONS ==="
          echo ""
          echo "Based on the diagnostic results, here are the recommended actions:"
          echo ""
          echo "1. **Grant Subscription-Level Permissions (Required for role assignments):**"
          echo "   az role assignment create \\"
          echo "     --role 'User Access Administrator' \\"
          echo "     --assignee ${{ secrets.AZURE_CLIENT_ID }} \\"
          echo "     --scope '/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}'"
          echo ""
          echo "2. **Grant Storage Account Management Permissions:**"
          echo "   az role assignment create \\"
          echo "     --role 'Contributor' \\"
          echo "     --assignee ${{ secrets.AZURE_CLIENT_ID }} \\"
          echo "     --scope '/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}'"
          echo ""
          echo "3. **Alternative: Grant Resource Group Level Permissions:**"
          echo "   RG_NAME='rg-terraform-state-${{ inputs.environment }}-cus-001'"
          echo "   az role assignment create \\"
          echo "     --role 'Contributor' \\"
          echo "     --assignee ${{ secrets.AZURE_CLIENT_ID }} \\"
          echo "     --scope \"/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/\$RG_NAME\""
          echo ""
          echo "   az role assignment create \\"
          echo "     --role 'User Access Administrator' \\"
          echo "     --assignee ${{ secrets.AZURE_CLIENT_ID }} \\"
          echo "     --scope \"/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/\$RG_NAME\""
          echo ""
          echo "4. **For Storage Access (if storage account exists):**"
          echo "   SA_NAME='st$(echo '${{ inputs.environment }}' | tr -d '-')cus001tfstate'"
          echo "   STORAGE_ID=\$(az storage account show --name \$SA_NAME --resource-group \$RG_NAME --query id -o tsv)"
          echo ""
          echo "   az role assignment create \\"
          echo "     --role 'Storage Blob Data Owner' \\"
          echo "     --assignee ${{ secrets.AZURE_CLIENT_ID }} \\"
          echo "     --scope \"\$STORAGE_ID\""
          echo ""
          echo "5. **Update Storage Account Network Rules (if needed):**"
          echo "   az storage account update \\"
          echo "     --name \$SA_NAME \\"
          echo "     --resource-group \$RG_NAME \\"
          echo "     --default-action Allow"
          echo ""
          echo "Run these commands with an account that has subscription Owner or User Access Administrator privileges."

      - name: "üìä Test Azure Monitor Logs"
        run: |
          echo "=== TESTING AZURE MONITOR ACCESS ==="
          echo "Checking if we can query Azure Monitor logs..."
          
          # Try to list Log Analytics workspaces
          echo "Available Log Analytics workspaces:"
          az monitor log-analytics workspace list \
            --query "[].{Name:name, ResourceGroup:resourceGroup, Location:location}" \
            --output table || echo "‚ùå Cannot access Log Analytics workspaces"
          
          echo -e "\nTo enable storage logging, use the queries from .github/AUTHENTICATION-MONITORING.md"
          echo "after resolving the permission issues above."
