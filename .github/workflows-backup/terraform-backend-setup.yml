name: üîß Setup Terraform Backend

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to setup backend for'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      force_recreate:
        description: 'Force recreate backend resources'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      environment:
        description: 'Environment to setup backend for'
        required: true
        type: string
        default: 'dev'
      force_recreate:
        description: 'Force recreate backend resources'
        required: false
        type: boolean
        default: false

env:
  TERRAFORM_VERSION: '1.7.0'

jobs:
  setup-backend:
    name: Setup Azure Storage Backend
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read
    
    defaults:
      run:
        shell: bash
        working-directory: ./infra/tf

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîê Azure Login (Federated Identity)
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: ÔøΩ Set Terraform Authentication
        run: |
          echo "Setting up Terraform Azure authentication..."
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

      - name: ÔøΩüîç Verify Azure CLI Access
        run: |
          echo "Current Azure subscription:"
          az account show --query '{name:name, id:id}' -o table
          
          echo "Available subscriptions:"
          az account list --query '[].{name:name, id:id, isDefault:isDefault}' -o table

      - name: üèóÔ∏è Setup Terraform Backend
        run: |
          echo "Setting up Terraform backend for environment: ${{ github.event.inputs.environment }}"
          
          # Make script executable
          chmod +x setup-backend.sh
          
          # Run backend setup
          ./setup-backend.sh
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          FORCE_RECREATE: ${{ github.event.inputs.force_recreate }}

      - name: üîê Configure Storage Account Permissions
        run: |
          echo "Configuring storage account permissions for service principal..."
          
          # Get storage account ID
          STORAGE_ACCOUNT_ID=$(az storage account show \
            --name "staks${{ github.event.inputs.environment }}cus001tfstate" \
            --resource-group "rg-terraform-state-${{ github.event.inputs.environment }}-cus-001" \
            --query "id" -o tsv)
          
          echo "Storage Account ID: $STORAGE_ACCOUNT_ID"
          
          # Assign Storage Blob Data Contributor role to the service principal
          echo "Assigning Storage Blob Data Contributor role..."
          az role assignment create \
            --role "Storage Blob Data Contributor" \
            --assignee "${{ secrets.AZURE_CLIENT_ID }}" \
            --scope "$STORAGE_ACCOUNT_ID" \
            --output table || true
          
          # Assign Storage Blob Data Owner role for full access (needed for Terraform operations)
          echo "Assigning Storage Blob Data Owner role..."
          az role assignment create \
            --role "Storage Blob Data Owner" \
            --assignee "${{ secrets.AZURE_CLIENT_ID }}" \
            --scope "$STORAGE_ACCOUNT_ID" \
            --output table || true
          
          # Also assign Reader role to allow listing containers
          echo "Assigning Reader role for container listing..."
          az role assignment create \
            --role "Reader" \
            --assignee "${{ secrets.AZURE_CLIENT_ID }}" \
            --scope "$STORAGE_ACCOUNT_ID" \
            --output table || true
          
          echo "‚úÖ Storage account permissions configured"
          
          # Verify permissions
          echo "Current role assignments for the service principal:"
          az role assignment list \
            --assignee "${{ secrets.AZURE_CLIENT_ID }}" \
            --scope "$STORAGE_ACCOUNT_ID" \
            --query "[].{Role:roleDefinitionName, Scope:scope}" \
            --output table || true

      - name: üìä Setup Azure Monitor Diagnostics Info
        run: |
          echo "=== Azure Monitor Diagnostics Information ==="
          
          # Check if diagnostic settings were created
          echo "Checking diagnostic settings for storage account..."
          az monitor diagnostic-settings list \
            --resource "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-terraform-state-${{ github.event.inputs.environment }}-cus-001/providers/Microsoft.Storage/storageAccounts/staks${{ github.event.inputs.environment }}cus001tfstate" \
            --query "[].{Name:name, WorkspaceId:workspaceId}" \
            --output table || echo "No diagnostic settings found"
          
          echo ""
          echo "=== How to Monitor Authentication Issues ==="
          echo "If you experience authentication errors, you can query Azure Monitor logs:"
          echo ""
          echo "üìã Storage Blob Authentication Errors:"
          echo "StorageBlobLogs"
          echo "| where TimeGenerated > ago(1h)"
          echo "| where StatusCode >= 400"
          echo "| where StatusCode in (401, 403)"
          echo "| project TimeGenerated, StatusCode, StatusText, CallerIpAddress, AuthenticationType, RequesterObjectId"
          echo ""
          echo "üìã Storage Account Access Logs:"
          echo "StorageAccountLogs"
          echo "| where TimeGenerated > ago(1h)" 
          echo "| where StatusCode >= 400"
          echo "| project TimeGenerated, StatusCode, OperationName, CallerIpAddress, AuthenticationType"
          echo ""
          echo "üí° These queries will help identify authentication failures and their causes."

      - name: üìã Capture Backend Configuration
        id: backend-config
        run: |
          if [ -f backend-config.txt ]; then
            echo "Backend configuration created successfully"
            cat backend-config.txt
            
            # Extract values for outputs
            RG_NAME=$(grep "resource_group_name" backend-config.txt | cut -d'"' -f2)
            SA_NAME=$(grep "storage_account_name" backend-config.txt | cut -d'"' -f2)
            CONTAINER_NAME=$(grep "container_name" backend-config.txt | cut -d'"' -f2)
            
            echo "resource_group_name=${RG_NAME}" >> $GITHUB_OUTPUT
            echo "storage_account_name=${SA_NAME}" >> $GITHUB_OUTPUT
            echo "container_name=${CONTAINER_NAME}" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Backend configuration file not found"
            exit 1
          fi

      - name: üîê Store Backend Configuration
        run: |
          echo "Backend setup completed for ${{ github.event.inputs.environment }}"
          echo "Resource Group: ${{ steps.backend-config.outputs.resource_group_name }}"
          echo "Storage Account: ${{ steps.backend-config.outputs.storage_account_name }}"
          echo "Container: ${{ steps.backend-config.outputs.container_name }}"

      - name: üì§ Upload Backend Config as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-config-${{ github.event.inputs.environment }}
          path: ./infra/tf/backend-config.txt
          retention-days: 30

  verify-backend:
    name: Verify Backend Setup
    runs-on: ubuntu-latest
    needs: setup-backend
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read
    
    defaults:
      run:
        shell: bash
        working-directory: ./infra/tf

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: üîç Debug OIDC Environment (Verify Job)
        run: |
          echo "OIDC Environment Check for Verify Job:"
          echo "ACTIONS_ID_TOKEN_REQUEST_URL: ${ACTIONS_ID_TOKEN_REQUEST_URL:-'NOT SET'}"
          echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${ACTIONS_ID_TOKEN_REQUEST_TOKEN:+SET}"
          echo "Runner OS: $RUNNER_OS"
          echo "GitHub Actor: $GITHUB_ACTOR"
          echo "GitHub Repository: $GITHUB_REPOSITORY"

      - name: üì• Download Backend Config
        uses: actions/download-artifact@v4
        with:
          name: backend-config-${{ github.event.inputs.environment }}
          path: ./infra/tf/

      - name: üîê Azure Login (Federated Identity)
        uses: azure/login@v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üîß Set Terraform Authentication
        run: |
          echo "Setting up Terraform Azure authentication..."
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

      - name: üîç Debug Authentication Context
        run: |
          echo "=== Authentication Debug Information ==="
          echo "Service Principal ID: ${{ secrets.AZURE_CLIENT_ID }}"
          echo "Tenant ID: ${{ secrets.AZURE_TENANT_ID }}"
          echo "Subscription ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          echo "Current Azure CLI context:"
          az account show --query '{name:name, id:id, user:user}' -o table
          
          echo "=== Testing Storage Account Access ==="
          # Test basic storage account access
          az storage account show \
            --name "staks${{ github.event.inputs.environment }}cus001tfstate" \
            --resource-group "rg-terraform-state-${{ github.event.inputs.environment }}-cus-001" \
            --query '{name:name, id:id, allowSharedKeyAccess:allowSharedKeyAccess}' -o table || true
          
          echo "=== Current Role Assignments ==="
          STORAGE_ACCOUNT_ID=$(az storage account show \
            --name "staks${{ github.event.inputs.environment }}cus001tfstate" \
            --resource-group "rg-terraform-state-${{ github.event.inputs.environment }}-cus-001" \
            --query "id" -o tsv)
          
          az role assignment list \
            --assignee "${{ secrets.AZURE_CLIENT_ID }}" \
            --scope "$STORAGE_ACCOUNT_ID" \
            --query "[].{Role:roleDefinitionName, Scope:scope, PrincipalType:principalType}" \
            --output table || true

      - name: ‚è±Ô∏è Wait for Permission Propagation
        run: |
          echo "Waiting 30 seconds for RBAC permissions to propagate..."
          sleep 30

      - name: üß™ Test Storage Account Connectivity
        run: |
          echo "Testing storage account connectivity and permissions..."
          
          # Read values from backend-config.txt
          if [ -f backend-config.txt ]; then
            SA_NAME=$(grep "storage_account_name" backend-config.txt | cut -d'"' -f2)
            CONTAINER_NAME=$(grep "container_name" backend-config.txt | cut -d'"' -f2)
            
            echo "Testing access to storage account: $SA_NAME"
            echo "Testing access to container: $CONTAINER_NAME"
            
            # Test 1: Can we list containers?
            echo "üìã Test 1: Listing containers..."
            az storage container list \
              --account-name "$SA_NAME" \
              --auth-mode login \
              --output table || echo "‚ùå Failed to list containers"
            
            # Test 2: Can we access the specific container?
            echo "üìã Test 2: Checking container properties..."
            az storage container show \
              --name "$CONTAINER_NAME" \
              --account-name "$SA_NAME" \
              --auth-mode login \
              --output table || echo "‚ùå Failed to access container"
            
            # Test 3: Can we list blobs (this is what Terraform does)?
            echo "üìã Test 3: Listing blobs in container..."
            az storage blob list \
              --container-name "$CONTAINER_NAME" \
              --account-name "$SA_NAME" \
              --auth-mode login \
              --output table || echo "‚ùå Failed to list blobs (this is likely the Terraform issue)"
            
            # Test 4: Try to create a test blob
            echo "üìã Test 4: Testing blob write access..."
            echo "test-connectivity" | az storage blob upload \
              --container-name "$CONTAINER_NAME" \
              --account-name "$SA_NAME" \
              --name "connectivity-test.txt" \
              --auth-mode login \
              --overwrite true || echo "‚ùå Failed to write test blob"
            
            # Clean up test blob
            az storage blob delete \
              --container-name "$CONTAINER_NAME" \
              --account-name "$SA_NAME" \
              --name "connectivity-test.txt" \
              --auth-mode login || echo "‚ö†Ô∏è Could not clean up test blob"
            
            echo "‚úÖ Storage connectivity tests completed"
          else
            echo "‚ùå Backend configuration file not found"
            exit 1
          fi

      - name: üèóÔ∏è Update Backend Configuration
        run: |
          echo "Updating backend.tf with actual values..."
          
          # Read values from backend-config.txt
          if [ -f backend-config.txt ]; then
            RG_NAME=$(grep "resource_group_name" backend-config.txt | cut -d'"' -f2)
            SA_NAME=$(grep "storage_account_name" backend-config.txt | cut -d'"' -f2)
            CONTAINER_NAME=$(grep "container_name" backend-config.txt | cut -d'"' -f2)
            KEY_NAME=$(grep "key" backend-config.txt | cut -d'"' -f2)
            
            # Create temporary backend.tf with actual values and Azure AD auth
            cat > backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${RG_NAME}"
              storage_account_name = "${SA_NAME}"
              container_name       = "${CONTAINER_NAME}"
              key                  = "${KEY_NAME}"
              use_azuread_auth     = true
            }
          }
          EOF
            
            echo "‚úÖ Backend configuration updated with Azure AD auth and OIDC"
            cat backend.tf
          else
            echo "‚ùå Backend configuration file not found"
            exit 1
          fi

      - name: üß™ Test Storage Account Access
        run: |
          echo "Testing storage account access before Terraform init..."
          
          # Get storage account details
          STORAGE_ACCOUNT_NAME=$(grep "storage_account_name" backend-config.txt | cut -d'"' -f2)
          CONTAINER_NAME=$(grep "container_name" backend-config.txt | cut -d'"' -f2)
          
          echo "Storage Account: $STORAGE_ACCOUNT_NAME"
          echo "Container: $CONTAINER_NAME"
          
          # Test if we can list containers (this is what Terraform tries to do)
          echo "Testing container listing with Azure CLI..."
          az storage container list \
            --account-name "$STORAGE_ACCOUNT_NAME" \
            --auth-mode login \
            --query "[].{name:name, lastModified:properties.lastModified}" \
            --output table || {
              echo "‚ùå Failed to list containers with Azure CLI"
              echo "This indicates a permission issue that will affect Terraform"
            }
          
          # Test blob listing in the specific container
          echo "Testing blob listing in terraform-state container..."
          az storage blob list \
            --account-name "$STORAGE_ACCOUNT_NAME" \
            --container-name "$CONTAINER_NAME" \
            --auth-mode login \
            --query "[].{name:name, lastModified:properties.lastModified}" \
            --output table || {
              echo "‚ö†Ô∏è Could not list blobs in container (may be empty or permission issue)"
            }

      - name: üöÄ Initialize Terraform
        run: |
          echo "Initializing Terraform with backend..."
          echo "Using ARM environment variables for authentication:"
          echo "ARM_CLIENT_ID: ${ARM_CLIENT_ID:+SET}"
          echo "ARM_TENANT_ID: ${ARM_TENANT_ID:+SET}" 
          echo "ARM_SUBSCRIPTION_ID: ${ARM_SUBSCRIPTION_ID:+SET}"
          echo "ARM_USE_OIDC: ${ARM_USE_OIDC}"
          
          # Try with enhanced logging
          export TF_LOG=DEBUG
          export TF_LOG_PATH=terraform-init.log
          
          terraform init -input=false || {
            echo "‚ùå Terraform init failed. Checking logs..."
            if [ -f terraform-init.log ]; then
              echo "=== Terraform Debug Log (last 50 lines) ==="
              tail -50 terraform-init.log
            fi
            
            echo "=== Trying alternative backend configuration ==="
            # Create alternative backend without use_azuread_auth
            RG_NAME=$(grep "resource_group_name" backend-config.txt | cut -d'"' -f2)
            SA_NAME=$(grep "storage_account_name" backend-config.txt | cut -d'"' -f2)
            CONTAINER_NAME=$(grep "container_name" backend-config.txt | cut -d'"' -f2)
            KEY_NAME=$(grep "key" backend-config.txt | cut -d'"' -f2)
            
            cat > backend-alternative.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${RG_NAME}"
              storage_account_name = "${SA_NAME}"
              container_name       = "${CONTAINER_NAME}"
              key                  = "${KEY_NAME}"
            }
          }
          EOF
            
            echo "Trying with alternative backend config (ARM env vars only)..."
            rm -f backend.tf
            mv backend-alternative.tf backend.tf
            cat backend.tf
            
            terraform init -input=false || {
              echo "‚ùå Both authentication methods failed"
              echo "This suggests a deeper permission or configuration issue"
              exit 1
            }
          }

      - name: ‚úÖ Verify Backend Connection
        run: |
          echo "Verifying Terraform backend connection..."
          terraform workspace list
          
          echo "‚úÖ Backend verification completed successfully!"
          echo "Your Terraform backend is ready for infrastructure deployment."
