name: 🚀 Deploy AKS Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      force_backend_setup:
        description: 'Force backend setup (even if already exists)'
        required: false
        default: false
        type: boolean
      auto_approve:
        description: 'Auto approve apply/destroy (use with caution)'
        required: false
        default: false
        type: boolean
  push:
    branches: [main]
    paths:
      - 'infra/tf/**'
      - '.github/workflows/terraform-*.yml'
      - '.github/workflows/infrastructure-deploy.yml'

env:
  TERRAFORM_VERSION: '1.7.0'

jobs:
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect File Changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual trigger - run based on inputs
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "infrastructure=true" >> $GITHUB_OUTPUT
          else
            # Auto trigger - detect changes
            BACKEND_CHANGED=false
            INFRA_CHANGED=false
            
            # Check for backend changes
            if git diff --name-only HEAD~1 HEAD | grep -E "(setup-backend|terraform-backend-setup)" > /dev/null; then
              BACKEND_CHANGED=true
            fi
            
            # Check for infrastructure changes  
            if git diff --name-only HEAD~1 HEAD | grep -E "infra/tf/.*\.(tf|tfvars)" > /dev/null; then
              INFRA_CHANGED=true
            fi
            
            echo "backend=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
            echo "infrastructure=$INFRA_CHANGED" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Determine Environment
        id: environment
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            # Auto-detect environment from branch or default to dev
            ENV="dev"
            if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
              ENV="staging"
            elif [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
              ENV="prod"
            fi
            echo "environment=$ENV" >> $GITHUB_OUTPUT
          fi

  setup-backend:
    name: 🔧 Setup Backend
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true' || github.event.inputs.force_backend_setup == 'true'
    uses: ./.github/workflows/terraform-backend-setup.yml
    with:
      environment: ${{ needs.detect-changes.outputs.environment }}
      force_recreate: ${{ github.event.inputs.force_backend_setup == 'true' }}
    secrets: inherit

  terraform-plan:
    name: 📋 Terraform Plan
    needs: [detect-changes, setup-backend]
    if: |
      always() && 
      (needs.setup-backend.result == 'success' || needs.setup-backend.result == 'skipped') &&
      (needs.detect-changes.outputs.infrastructure-changed == 'true' || github.event_name == 'workflow_dispatch')
    uses: ./.github/workflows/terraform-deploy.yml
    with:
      environment: ${{ needs.detect-changes.outputs.environment }}
      action: plan
      auto_approve: false
    secrets: inherit

  terraform-apply:
    name: 🚀 Terraform Apply
    needs: [detect-changes, terraform-plan]
    if: |
      always() &&
      needs.terraform-plan.result == 'success' &&
      (github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy') &&
      github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/terraform-deploy.yml
    with:
      environment: ${{ needs.detect-changes.outputs.environment }}
      action: ${{ github.event.inputs.action }}
      auto_approve: ${{ github.event.inputs.auto_approve == 'true' }}
    secrets: inherit

  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, setup-backend, terraform-plan, terraform-apply]
    if: always()
    steps:
      - name: 📊 Generate Summary
        run: |
          echo "## 🚀 AKS Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.detect-changes.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Setup | ${{ needs.setup-backend.result || 'skipped' }} | ${{ needs.detect-changes.outputs.backend-changed == 'true' && 'Backend changes detected' || 'No backend changes' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Plan | ${{ needs.terraform-plan.result || 'skipped' }} | ${{ needs.detect-changes.outputs.infrastructure-changed == 'true' && 'Infrastructure changes detected' || 'Manual trigger' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Apply | ${{ needs.terraform-apply.result || 'skipped' }} | ${{ github.event.inputs.action || 'Plan only' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.terraform-apply.result }}" == "success" ]; then
            echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.terraform-plan.result }}" == "success" ]; then
            echo "📋 **Plan completed - ready for apply**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment encountered issues - check logs**" >> $GITHUB_STEP_SUMMARY
          fi
