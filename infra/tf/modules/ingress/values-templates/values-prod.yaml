controller:
  service:
    type: LoadBalancer
    annotations:
      service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
      %{ if enable_internal_lb }
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "${subnet_name}"
      %{ endif }
  replicaCount: ${replica_count}
  resources:
    requests:
      cpu: ${cpu_requests}
      memory: ${memory_requests}
    limits:
      cpu: ${cpu_limits}
      memory: ${memory_limits}
  nodeSelector:
    kubernetes.io/os: linux
  tolerations: []
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/name: ingress-nginx
        topologyKey: kubernetes.io/hostname
  
  # Production-grade configurations
  config:
    use-proxy-protocol: "true"
    compute-full-forwarded-for: "true"
    use-forwarded-headers: "true"
    log-format-escape-json: "true"
    log-format-upstream: '{"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x_forwarded_for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status": $status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time, "method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent"}'

# Production-specific configurations
defaultBackend:
  enabled: true
  resources:
    requests:
      cpu: 50m
      memory: 60Mi
    limits:
      cpu: 100m
      memory: 120Mi

# Enable comprehensive monitoring
metrics:
  enabled: ${enable_metrics}
  service:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "10254"
  %{ if enable_prometheus_rule }
  prometheusRule:
    enabled: true
    rules:
      - alert: NGINXConfigFailed
        expr: count(nginx_ingress_controller_config_last_reload_successful == 0) > 0
        for: 1s
        labels:
          severity: critical
        annotations:
          description: bad ingress config - nginx config test failed
          summary: uninstall the latest ingress changes to allow config reloads to resume
      - alert: NGINXCertificateExpiry
        expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) < 604800
        for: 1s
        labels:
          severity: critical
        annotations:
          description: ssl certificate(s) will expire in less then a week
          summary: renew expiring certificates to avoid downtime
  %{ endif }
